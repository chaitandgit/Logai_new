def extract_level_info(row):
    rfc5424_map = {
        "0": "Emergency", "1": "Alert", "2": "Critical", "3": "Error",
        "4": "Warning", "5": "Notice", "6": "Informational", "7": "Debug"
    }

    text = None
    mismatch_flag = False

    # Step 1: use metadata.template if present
    if pd.notna(row.get("metadata.template")) and row["metadata.template"]:
        text = str(row["metadata.template"])
    # Step 2: fall back to sample_first/last
    elif pd.notna(row.get("metadata.sample_first")) and pd.notna(row.get("metadata.sample_last")):
        if row["metadata.sample_first"] == row["metadata.sample_last"]:
            text = str(row["metadata.sample_first"])
        else:
            mismatch_flag = True
            text = str(row["metadata.sample_first"])  # still parse something
    # Step 3: last resort
    else:
        for candidate in ["metadata.sample_first", "metadata.sample_last", "message"]:
            if candidate in row and pd.notna(row[candidate]) and row[candidate]:
                text = str(row[candidate])
                break

    # Default values
    rfc_val, log_level = "Unknown", "Unknown"

    if text:
        # Match "L1..L7"
        m = re.search(r"\bL([0-7])\b", text)
        if m:
            rfc_val = m.group(1)
            log_level = rfc5424_map.get(rfc_val, "Unknown")
        else:
            # Match standalone RFC5424 digits (not timestamps)
            m = re.search(r"(?<!\d)([0-7])(?!\d)", text)
            if m:
                rfc_val = m.group(1)
                log_level = rfc5424_map.get(rfc_val, "Unknown")
            else:
                # Match textual levels
                m = re.search(r"\b(debug|info|warn|error|critical|notice|trace)\b", text, re.IGNORECASE)
                if m:
                    rfc_val = "Unknown"
                    log_level = m.group(1).capitalize()

    if mismatch_flag:
        log_level = "Mismatch"

    return pd.Series([rfc_val, log_level])


df[["RFC5424_code", "log_level_text"]] = df.apply(extract_level_info, axis=1)